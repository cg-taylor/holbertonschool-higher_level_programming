The ''1-my_list'' module
========================

Using ''my_list''
------------------------

Import my_list from 1-my_list
    >>> MyList = __import__('1-my_list').MyList


Test 0: is MyList an instance of list
     >>> tester = MyList()
     >>> isinstance(tester, list)
     True

Test 1: is MyList of class MyList
     >>> tester = MyList()
     >>> type(tester) == MyList
     True

Test 2: is print_sorted an instance method
     >>> type(MyList.__dict__['print_sorted'])
     <class 'function'>

Test 3: no arguments passed to print_sorted
     >>> tester = MyList()
     >>> tester.__class__.print_sorted()
     Traceback (most recent call last):
     TypeError: print_sorted() missing 1 required positional argument: 'self'

Test 4: empty list for print_sorted
     >>> tester = MyList()
     >>> tester.print_sorted()
     []

Test 5: additional argument(s) passed to print_sorted
     >>> tester = MyList([4, 1])
     >>> tester.print_sorted([10])
     Traceback (most recent call last):
     TypeError: print_sorted() takes 1 positional argument but 2 were given

     >>> tester = MyList([3, 4])
     >>> tester.print_sorted([12, 5, 29], 8)
     Traceback (most recent call last):
     TypeError: print_sorted() takes 1 positional argument but 3 were given

Test 6: repeated numbers, should result in normal behavior
    >>> my_list = MyList([2, 7, 4, 2])
    >>> my_list.print_sorted()
    [2, 2, 4, 7]

Test 7: negative and positive numbers, should result in normal behavior
    >>> my_list = MyList([-2, 7, 4, -9])
    >>> my_list.print_sorted()
    [-9, -2, 4, 7]

Test 8: all negative numbers in list
     >>> my_list = MyList([-10, -14, -6, -51])
     >>> my_list.print_sorted()
     [-51, -14, -10, -6]

Test 9: list unchanged after print_sorted
     >>> my_list = MyList([4, 8, 3])
     >>> my_list.print_sorted()
     [3, 4, 8]

     >>> print(my_list)
     [4, 8, 3]

Test 10: I can append to this list
     >>> tester = MyList([4, 7, 2])
     >>> tester.append(3)
     >>> tester
     [4, 7, 2, 3]
